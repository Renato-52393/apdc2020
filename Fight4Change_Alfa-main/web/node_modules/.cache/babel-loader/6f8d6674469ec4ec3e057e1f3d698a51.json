{"ast":null,"code":"/**\r\n * Checks whether or not a value is a boolean.\r\n *\r\n * @param value\r\n */\nfunction isBoolean(value) {\n  return typeof value === \"boolean\";\n}\n/**\r\n * Checks whether or not a value is a function.\r\n *\r\n * @param value\r\n */\n\n\nfunction isFunction(value) {\n  // eslint-disable-next-line eqeqeq\n  return !!(value && {}.toString.call(value) == \"[object Function]\");\n}\n/**\r\n * Checks whether or not a value is a number.\r\n *\r\n * @param value\r\n */\n\n\nfunction isNumber(value) {\n  return typeof value === \"number\" && !isNaN(value);\n}\n/**\r\n * Checks whether or not a value is a string.\r\n *\r\n * @param value\r\n */\n\n\nfunction isString(value) {\n  return typeof value === \"string\";\n}\n\nexport { isBoolean, isFunction, isNumber, isString };","map":{"version":3,"sources":["C:/Users/mifer/Desktop/Fight4Change_Alfa/web/node_modules/@reach/utils/type-check/dist/reach-utils-type-check.esm.js"],"names":["isBoolean","value","isFunction","toString","call","isNumber","isNaN","isString"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,CAAmBC,KAAnB,EAA0B;AACxB,SAAO,OAAOA,KAAP,KAAiB,SAAxB;AACD;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASC,UAAT,CAAoBD,KAApB,EAA2B;AACzB;AACA,SAAO,CAAC,EAAEA,KAAK,IAAI,GAAGE,QAAH,CAAYC,IAAZ,CAAiBH,KAAjB,KAA2B,mBAAtC,CAAR;AACD;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASI,QAAT,CAAkBJ,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAjB,IAA6B,CAACK,KAAK,CAACL,KAAD,CAA1C;AACD;AACD;AACA;AACA;AACA;AACA;;;AAEA,SAASM,QAAT,CAAkBN,KAAlB,EAAyB;AACvB,SAAO,OAAOA,KAAP,KAAiB,QAAxB;AACD;;AAED,SAASD,SAAT,EAAoBE,UAApB,EAAgCG,QAAhC,EAA0CE,QAA1C","sourcesContent":["/**\r\n * Checks whether or not a value is a boolean.\r\n *\r\n * @param value\r\n */\r\nfunction isBoolean(value) {\r\n  return typeof value === \"boolean\";\r\n}\r\n/**\r\n * Checks whether or not a value is a function.\r\n *\r\n * @param value\r\n */\r\n\r\nfunction isFunction(value) {\r\n  // eslint-disable-next-line eqeqeq\r\n  return !!(value && {}.toString.call(value) == \"[object Function]\");\r\n}\r\n/**\r\n * Checks whether or not a value is a number.\r\n *\r\n * @param value\r\n */\r\n\r\nfunction isNumber(value) {\r\n  return typeof value === \"number\" && !isNaN(value);\r\n}\r\n/**\r\n * Checks whether or not a value is a string.\r\n *\r\n * @param value\r\n */\r\n\r\nfunction isString(value) {\r\n  return typeof value === \"string\";\r\n}\r\n\r\nexport { isBoolean, isFunction, isNumber, isString };\r\n"]},"metadata":{},"sourceType":"module"}